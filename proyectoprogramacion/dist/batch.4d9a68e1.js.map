{"version":3,"sources":["../node_modules/refractor/lang/batch.js"],"names":[],"mappings":";AAAA,aAKA,SAAA,EAAA,IACA,SAAA,GACA,IAAA,EAAA,qBACA,EAAA,CACA,QAAA,+CACA,MAAA,YACA,OAAA,CACA,YAAA,MAGA,EAAA,UACA,EAAA,gBACA,EAAA,UAAA,MAAA,CACA,QAAA,CACA,SACA,CACA,QAAA,6DACA,YAAA,IAGA,MAAA,CACA,QAAA,QACA,MAAA,YAEA,QAAA,CACA,CAEA,QAAA,qFACA,YAAA,EACA,OAAA,CACA,QAAA,wBACA,OAAA,EACA,UAAA,EACA,SAAA,EACA,OAAA,EACA,YAAA,WAGA,CAEA,QAAA,wMACA,YAAA,EACA,OAAA,CACA,QAAA,4DACA,OAAA,EACA,UAAA,EACA,SAAA,EACA,OAAA,EACA,SAAA,2CAGA,CAEA,QAAA,8BACA,YAAA,EACA,OAAA,CACA,QAAA,aAGA,CAEA,QAAA,kGACA,YAAA,EACA,OAAA,CACA,QAAA,UACA,OAAA,EACA,UAAA,EACA,SAAA,CAAA,EAAA,mCACA,OAAA,EACA,SAAA,kCACA,YAAA,WAGA,CAEA,QAAA,+DACA,YAAA,EACA,OAAA,CACA,QAAA,UACA,OAAA,EACA,UAAA,EACA,MAAA,CACA,QAAA,cACA,YAAA,EACA,MAAA,YAEA,SAAA,EACA,OAAA,EACA,SAAA,QAIA,SAAA,OACA,YAAA,SA5FA,CA8FA,GAlGA,OAAA,QAAA,EACA,EAAA,YAAA,QACA,EAAA,QAAA","file":"batch.4d9a68e1.js","sourceRoot":"..\\public","sourcesContent":["'use strict'\n\nmodule.exports = batch\nbatch.displayName = 'batch'\nbatch.aliases = []\nfunction batch(Prism) {\n  ;(function(Prism) {\n    var variable = /%%?[~:\\w]+%?|!\\S+!/\n    var parameter = {\n      pattern: /\\/[a-z?]+(?=[ :]|$):?|-[a-z]\\b|--[a-z-]+\\b/im,\n      alias: 'attr-name',\n      inside: {\n        punctuation: /:/\n      }\n    }\n    var string = /\"[^\"]*\"/\n    var number = /(?:\\b|-)\\d+\\b/\n    Prism.languages.batch = {\n      comment: [\n        /^::.*/m,\n        {\n          pattern: /((?:^|[&(])[ \\t]*)rem\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true\n        }\n      ],\n      label: {\n        pattern: /^:.*/m,\n        alias: 'property'\n      },\n      command: [\n        {\n          // FOR command\n          pattern: /((?:^|[&(])[ \\t]*)for(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* \\S+ in \\([^)]+\\) do/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^for\\b|\\b(?:in|do)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // IF command\n          pattern: /((?:^|[&(])[ \\t]*)if(?: ?\\/[a-z?](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:not )?(?:cmdextversion \\d+|defined \\w+|errorlevel \\d+|exist \\S+|(?:\"[^\"]*\"|\\S+)?(?:==| (?:equ|neq|lss|leq|gtr|geq) )(?:\"[^\"]*\"|\\S+))/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^if\\b|\\b(?:not|cmdextversion|defined|errorlevel|exist)\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: variable,\n            number: number,\n            operator: /\\^|==|\\b(?:equ|neq|lss|leq|gtr|geq)\\b/i\n          }\n        },\n        {\n          // ELSE command\n          pattern: /((?:^|[&()])[ \\t]*)else\\b/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^else\\b/i\n          }\n        },\n        {\n          // SET command\n          pattern: /((?:^|[&(])[ \\t]*)set(?: ?\\/[a-z](?:[ :](?:\"[^\"]*\"|\\S+))?)* (?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^set\\b/i,\n            string: string,\n            parameter: parameter,\n            variable: [variable, /\\w+(?=(?:[*\\/%+\\-&^|]|<<|>>)?=)/],\n            number: number,\n            operator: /[*\\/%+\\-&^|]=?|<<=?|>>=?|[!~_=]/,\n            punctuation: /[()',]/\n          }\n        },\n        {\n          // Other commands\n          pattern: /((?:^|[&(])[ \\t]*@?)\\w+\\b(?:[^^&)\\r\\n]|\\^(?:\\r\\n|[\\s\\S]))*/im,\n          lookbehind: true,\n          inside: {\n            keyword: /^\\w+\\b/i,\n            string: string,\n            parameter: parameter,\n            label: {\n              pattern: /(^\\s*):\\S+/m,\n              lookbehind: true,\n              alias: 'property'\n            },\n            variable: variable,\n            number: number,\n            operator: /\\^/\n          }\n        }\n      ],\n      operator: /[&@]/,\n      punctuation: /[()']/\n    }\n  })(Prism)\n}\n"]}
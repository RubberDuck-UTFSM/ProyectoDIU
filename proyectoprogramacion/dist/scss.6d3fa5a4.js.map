{"version":3,"sources":["../node_modules/refractor/lang/scss.js"],"names":[],"mappings":";AAAA,aAKA,SAAA,EAAA,GACA,EAAA,UAAA,KAAA,EAAA,UAAA,OAAA,MAAA,CACA,QAAA,CACA,QAAA,uCACA,YAAA,GAEA,OAAA,CACA,QAAA,0CACA,OAAA,CACA,KAAA,YAIA,IAAA,0BAQA,SAAA,CAEA,QAAA,iFACA,OAAA,CACA,OAAA,CACA,QAAA,IACA,MAAA,aAEA,YAAA,UACA,SAAA,2BAGA,SAAA,CACA,QAAA,4CACA,OAAA,CACA,SAAA,6BAIA,EAAA,UAAA,aAAA,OAAA,SAAA,CACA,QAAA,CACA,sGACA,CACA,QAAA,4BACA,YAAA,MAIA,EAAA,UAAA,aAAA,OAAA,YAAA,CAEA,SAAA,2BAEA,EAAA,UAAA,aAAA,OAAA,WAAA,CACA,YAAA,CACA,QAAA,UACA,MAAA,YAEA,UAAA,CACA,QAAA,6BACA,MAAA,WAEA,QAAA,qBACA,KAAA,CACA,QAAA,WACA,MAAA,WAEA,SAAA,CACA,QAAA,kDACA,YAAA,KAGA,EAAA,UAAA,KAAA,OAAA,OAAA,KAAA,EAAA,UAAA,KA3EA,OAAA,QAAA,EACA,EAAA,YAAA,OACA,EAAA,QAAA","file":"scss.6d3fa5a4.js","sourceRoot":"..\\public","sourcesContent":["'use strict'\n\nmodule.exports = scss\nscss.displayName = 'scss'\nscss.aliases = []\nfunction scss(Prism) {\n  Prism.languages.scss = Prism.languages.extend('css', {\n    comment: {\n      pattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n      lookbehind: true\n    },\n    atrule: {\n      pattern: /@[\\w-]+(?:\\([^()]+\\)|[^(])*?(?=\\s+[{;])/,\n      inside: {\n        rule: /@[\\w-]+/ // See rest below\n      }\n    },\n    // url, compassified\n    url: /(?:[-a-z]+-)?url(?=\\()/i,\n    // CSS selector regex is not appropriate for Sass\n    // since there can be lot more things (var, @ directive, nesting..)\n    // a selector must start at the end of a property or after a brace (end of other rules or nesting)\n    // it can contain some characters that aren't used for defining rules or end of selector, & (parent selector), or interpolated variable\n    // the end of a selector is found when there is no rules in it ( {} or {\\s}) or if there is a property (because an interpolated var\n    // can \"pass\" as a selector- e.g: proper#{$erty})\n    // this one was hard to do, so please be careful if you edit this one :)\n    selector: {\n      // Initial look-ahead is used to prevent matching of blank selectors\n      pattern: /(?=\\S)[^@;{}()]?(?:[^@;{}()]|#\\{\\$[-\\w]+\\})+(?=\\s*\\{(?:\\}|\\s|[^}]+[:{][^}]+))/m,\n      inside: {\n        parent: {\n          pattern: /&/,\n          alias: 'important'\n        },\n        placeholder: /%[-\\w]+/,\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    },\n    property: {\n      pattern: /(?:[\\w-]|\\$[-\\w]+|#\\{\\$[-\\w]+\\})+(?=\\s*:)/,\n      inside: {\n        variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n      }\n    }\n  })\n  Prism.languages.insertBefore('scss', 'atrule', {\n    keyword: [\n      /@(?:if|else(?: if)?|for|each|while|import|extend|debug|warn|mixin|include|function|return|content)/i,\n      {\n        pattern: /( +)(?:from|through)(?= )/,\n        lookbehind: true\n      }\n    ]\n  })\n  Prism.languages.insertBefore('scss', 'important', {\n    // var and interpolated vars\n    variable: /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n  })\n  Prism.languages.insertBefore('scss', 'function', {\n    placeholder: {\n      pattern: /%[-\\w]+/,\n      alias: 'selector'\n    },\n    statement: {\n      pattern: /\\B!(?:default|optional)\\b/i,\n      alias: 'keyword'\n    },\n    boolean: /\\b(?:true|false)\\b/,\n    null: {\n      pattern: /\\bnull\\b/,\n      alias: 'keyword'\n    },\n    operator: {\n      pattern: /(\\s)(?:[-+*\\/%]|[=!]=|<=?|>=?|and|or|not)(?=\\s)/,\n      lookbehind: true\n    }\n  })\n  Prism.languages.scss['atrule'].inside.rest = Prism.languages.scss\n}\n"]}
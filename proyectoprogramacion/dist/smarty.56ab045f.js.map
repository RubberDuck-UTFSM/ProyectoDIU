{"version":3,"sources":["../node_modules/refractor/lang/smarty.js"],"names":[],"mappings":";AAAA,aACA,IAAA,EAAA,QAAA,0BAIA,SAAA,EAAA,GACA,EAAA,SAAA,GAKA,SAAA,GACA,EAAA,UAAA,OAAA,CACA,QAAA,mBACA,UAAA,CACA,QAAA,WACA,MAAA,eAEA,OAAA,mCACA,OAAA,2DACA,SAAA,CACA,cACA,cACA,CACA,QAAA,mBACA,YAAA,GAEA,CACA,QAAA,sBACA,YAAA,IAGA,SAAA,CACA,CACA,QAAA,qBACA,YAAA,GAEA,gBACA,mBAEA,YAAA,CAEA,QAAA,2BACA,OAAA,CACA,SAAA,CACA,QAAA,kBACA,YAAA,GAEA,SAAA,MAGA,YAAA,CAAA,mBACA,SAAA,CACA,mCACA,iDACA,kDAEA,QAAA,oCAEA,EAAA,MAAA,IAAA,kBAAA,SAAA,GACA,IAGA,GAAA,EACA,EAAA,UAAA,qBAAA,kBACA,EACA,SANA,iCAQA,SAAA,GAKA,MAXA,eAQA,IACA,GAAA,IAEA,IAZA,cAaA,IACA,GAAA,IAEA,OAMA,EAAA,MAAA,IAAA,iBAAA,SAAA,GACA,EAAA,UAAA,qBAAA,qBAAA,EAAA,YAzEA,CA2EA,GApFA,OAAA,QAAA,EACA,EAAA,YAAA,SACA,EAAA,QAAA","file":"smarty.56ab045f.js","sourceRoot":"..\\public","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\nAdd support for variables inside double quoted strings\nAdd support for {php}\n*/\n  ;(function(Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: [\n        {\n          pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /^\\/?(?!\\d)\\w+/,\n        /(?!\\d)\\w+(?=\\()/\n      ],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/\n      ],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    } // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function(env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g\n      var smartyLitteralStart = '{literal}'\n      var smartyLitteralEnd = '{/literal}'\n      var smartyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function(match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLitteralEnd) {\n            smartyLitteralMode = false\n          }\n          if (!smartyLitteralMode) {\n            if (match === smartyLitteralStart) {\n              smartyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n"]}
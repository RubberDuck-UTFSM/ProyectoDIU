{"version":3,"sources":["../node_modules/refractor/lang/django.js"],"names":[],"mappings":";AAAA,aACA,IAAA,EAAA,QAAA,0BAIA,SAAA,EAAA,GACA,EAAA,SAAA,GAGA,SAAA,GACA,EAAA,UAAA,OAAA,CACA,QAAA,iBACA,IAAA,CACA,QAAA,mBACA,YAAA,EACA,MAAA,WAEA,UAAA,CACA,QAAA,0BACA,MAAA,eAEA,OAAA,CACA,QAAA,kCACA,QAAA,GAEA,OAAA,CACA,QAAA,UACA,YAAA,EACA,MAAA,YAEA,KAAA,CACA,QAAA,mCACA,YAAA,EACA,MAAA,YAEA,SAAA,wBACA,QAAA,gFACA,SAAA,sDACA,OAAA,oBACA,QAAA,2BACA,SAAA,WACA,YAAA,iBAEA,IAAA,EAAA,0CACA,EAAA,EAAA,UAAA,qBACA,EAAA,MAAA,IAAA,kBAAA,SAAA,GACA,EAAA,kBAAA,EAAA,SAAA,KAEA,EAAA,MAAA,IAAA,iBAAA,SAAA,GACA,EAAA,qBAAA,EAAA,YAEA,EAAA,UAAA,OAAA,EAAA,UAAA,OACA,EAAA,MAAA,IAAA,kBAAA,SAAA,GACA,EAAA,kBAAA,EAAA,SAAA,KAEA,EAAA,MAAA,IAAA,iBAAA,SAAA,GACA,EAAA,qBAAA,EAAA,YA/CA,CAiDA,GAxDA,OAAA,QAAA,EACA,EAAA,YAAA,SACA,EAAA,QAAA,CAAA","file":"django.43136002.js","sourceRoot":"..\\public","sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = django\ndjango.displayName = 'django'\ndjango.aliases = ['jinja2']\nfunction django(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  // Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n  // Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n  ;(function(Prism) {\n    Prism.languages.django = {\n      comment: /^{#[\\s\\S]*?#}$/,\n      tag: {\n        pattern: /(^{%[+-]?\\s*)\\w+/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      delimiter: {\n        pattern: /^{[{%][+-]?|[+-]?[}%]}$/,\n        alias: 'punctuation'\n      },\n      string: {\n        pattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      },\n      filter: {\n        pattern: /(\\|)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      test: {\n        pattern: /(\\bis\\s+(?:not\\s+)?)(?!not\\b)\\w+/,\n        lookbehind: true,\n        alias: 'function'\n      },\n      function: /\\b[a-z_]\\w+(?=\\s*\\()/i,\n      keyword: /\\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\\b/,\n      operator: /[-+*/%=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]/,\n      number: /\\b\\d+(?:\\.\\d+)?\\b/,\n      boolean: /[Tt]rue|[Ff]alse|[Nn]one/,\n      variable: /\\b\\w+?\\b/,\n      punctuation: /[{}[\\](),.:;]/\n    }\n    var pattern = /{{[\\s\\S]*?}}|{%[\\s\\S]*?%}|{#[\\s\\S]*?#}/g\n    var markupTemplating = Prism.languages['markup-templating']\n    Prism.hooks.add('before-tokenize', function(env) {\n      markupTemplating.buildPlaceholders(env, 'django', pattern)\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      markupTemplating.tokenizePlaceholders(env, 'django')\n    }) // Add an Jinja2 alias\n    Prism.languages.jinja2 = Prism.languages.django\n    Prism.hooks.add('before-tokenize', function(env) {\n      markupTemplating.buildPlaceholders(env, 'jinja2', pattern)\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      markupTemplating.tokenizePlaceholders(env, 'jinja2')\n    })\n  })(Prism)\n}\n"]}
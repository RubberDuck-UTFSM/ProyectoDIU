{"version":3,"sources":["../node_modules/refractor/lang/jsx.js"],"names":[],"mappings":";AAAA,aAKA,SAAA,EAAA,IACA,SAAA,GACA,IAAA,EAAA,EAAA,KAAA,MAAA,EAAA,UAAA,YACA,EAAA,UAAA,IAAA,EAAA,UAAA,OAAA,SAAA,GACA,EAAA,UAAA,IAAA,IAAA,QAAA,4LACA,EAAA,UAAA,IAAA,IAAA,OAAA,IAAA,QAAA,kBACA,EAAA,UAAA,IAAA,IAAA,OACA,cACA,QAAA,yDACA,EAAA,UAAA,IAAA,IAAA,OAAA,IAAA,OACA,cACA,4BACA,EAAA,UAAA,aACA,SACA,YACA,CACA,OAAA,CACA,QAAA,6CACA,OAAA,CACA,YAAA,cACA,aAAA,SAIA,EAAA,UAAA,IAAA,KAEA,EAAA,UAAA,aACA,SACA,aACA,CACA,OAAA,CAEA,QAAA,4CACA,OAAA,CACA,qBAAA,CACA,QAAA,UACA,MAAA,eAEA,KAAA,EAAA,UAAA,KAEA,MAAA,wBAGA,EAAA,UAAA,IAAA,KAEA,IAAA,EAAA,SAAA,GACA,OAAA,EAGA,iBAAA,EACA,EAEA,iBAAA,EAAA,QACA,EAAA,QAEA,EAAA,QAAA,IAAA,GAAA,KAAA,IARA,IAUA,EAAA,SAAA,GAEA,IADA,IAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,GACA,GAAA,EAgDA,GA/CA,iBAAA,IAEA,QAAA,EAAA,MACA,EAAA,QAAA,IACA,QAAA,EAAA,QAAA,GAAA,KAGA,OAAA,EAAA,QAAA,GAAA,QAAA,GAAA,QAGA,EAAA,OAAA,GACA,EAAA,EAAA,OAAA,GAAA,UACA,EAAA,EAAA,QAAA,GAAA,QAAA,KAGA,EAAA,MAGA,OAAA,EAAA,QAAA,EAAA,QAAA,OAAA,GAAA,SAIA,EAAA,KAAA,CACA,QAAA,EAAA,EAAA,QAAA,GAAA,QAAA,IACA,aAAA,IAKA,EAAA,OAAA,GACA,gBAAA,EAAA,MACA,MAAA,EAAA,QAGA,EAAA,EAAA,OAAA,GAAA,eAEA,EAAA,OAAA,GACA,EAAA,EAAA,OAAA,GAAA,aAAA,GACA,gBAAA,EAAA,MACA,MAAA,EAAA,QAGA,EAAA,EAAA,OAAA,GAAA,eAEA,GAAA,IAGA,GAAA,iBAAA,IAEA,EAAA,OAAA,GACA,IAAA,EAAA,EAAA,OAAA,GAAA,aACA,CAGA,IAAA,EAAA,EAAA,GAEA,EAAA,EAAA,OAAA,IACA,iBAAA,EAAA,EAAA,IACA,eAAA,EAAA,EAAA,GAAA,QAEA,GAAA,EAAA,EAAA,EAAA,IACA,EAAA,OAAA,EAAA,EAAA,IAGA,EAAA,IACA,iBAAA,EAAA,EAAA,IACA,eAAA,EAAA,EAAA,GAAA,QAEA,EAAA,EAAA,EAAA,EAAA,IAAA,EACA,EAAA,OAAA,EAAA,EAAA,GACA,KAEA,EAAA,GAAA,IAAA,EAAA,MACA,aACA,EACA,KACA,GAIA,EAAA,SAAA,iBAAA,EAAA,SACA,EAAA,EAAA,WAIA,EAAA,MAAA,IAAA,iBAAA,SAAA,GACA,QAAA,EAAA,UAAA,QAAA,EAAA,UAGA,EAAA,EAAA,UAtJA,CAwJA,GA5JA,OAAA,QAAA,EACA,EAAA,YAAA,MACA,EAAA,QAAA","file":"jsx.b4757e32.js","sourceRoot":"..\\public","sourcesContent":["'use strict'\n\nmodule.exports = jsx\njsx.displayName = 'jsx'\njsx.aliases = []\nfunction jsx(Prism) {\n  ;(function(Prism) {\n    var javascript = Prism.util.clone(Prism.languages.javascript)\n    Prism.languages.jsx = Prism.languages.extend('markup', javascript)\n    Prism.languages.jsx.tag.pattern = /<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:-]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}))*\\s*\\/?)?>/i\n    Prism.languages.jsx.tag.inside['tag'].pattern = /^<\\/?[^\\s>\\/]*/i\n    Prism.languages.jsx.tag.inside[\n      'attr-value'\n    ].pattern = /=(?!\\{)(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'\">]+)/i\n    Prism.languages.jsx.tag.inside['tag'].inside[\n      'class-name'\n    ] = /^[A-Z]\\w*(?:\\.[A-Z]\\w*)*$/\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-name',\n      {\n        spread: {\n          pattern: /\\{\\.{3}[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\}/,\n          inside: {\n            punctuation: /\\.{3}|[{}.]/,\n            'attr-value': /\\w+/\n          }\n        }\n      },\n      Prism.languages.jsx.tag\n    )\n    Prism.languages.insertBefore(\n      'inside',\n      'attr-value',\n      {\n        script: {\n          // Allow for two levels of nesting\n          pattern: /=(\\{(?:\\{(?:\\{[^}]*\\}|[^}])*\\}|[^}])+\\})/i,\n          inside: {\n            'script-punctuation': {\n              pattern: /^=(?={)/,\n              alias: 'punctuation'\n            },\n            rest: Prism.languages.jsx\n          },\n          alias: 'language-javascript'\n        }\n      },\n      Prism.languages.jsx.tag\n    ) // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n      if (!token) {\n        return ''\n      }\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function(tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{'\n          ) {\n            // Here we might have entered a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left a JSX context inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside a JSX context.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            tokens[i] = new Prism.Token(\n              'plain-text',\n              plainText,\n              null,\n              plainText\n            )\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'jsx' && env.language !== 'tsx') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n"]}
{"version":3,"sources":["../node_modules/refractor/lang/groovy.js"],"names":[],"mappings":";AAAA,aAKA,SAAA,EAAA,GACA,EAAA,UAAA,OAAA,EAAA,UAAA,OAAA,QAAA,CACA,QAAA,6WACA,OAAA,CACA,CACA,QAAA,sDACA,QAAA,GAEA,CACA,QAAA,qCACA,QAAA,IAGA,OAAA,+FACA,SAAA,CACA,QAAA,uJACA,YAAA,GAEA,YAAA,sBAEA,EAAA,UAAA,aAAA,SAAA,SAAA,CACA,QAAA,CACA,QAAA,OACA,MAAA,aAGA,EAAA,UAAA,aAAA,SAAA,cAAA,CACA,cAAA,0DAEA,EAAA,UAAA,aAAA,SAAA,WAAA,CACA,WAAA,CACA,MAAA,cACA,QAAA,eACA,YAAA,KAGA,EAAA,MAAA,IAAA,OAAA,SAAA,GACA,GAAA,WAAA,EAAA,UAAA,WAAA,EAAA,KAAA,CACA,IAAA,EAAA,EAAA,QAAA,MAAA,GACA,GAAA,KAAA,EAAA,CACA,IAAA,EAAA,kCACA,MAAA,IACA,EAAA,mCAEA,EAAA,QAAA,MAAA,EAAA,QAAA,MACA,QAAA,QAAA,KACA,QAAA,SAAA,KACA,EAAA,QAAA,EAAA,UAAA,EAAA,QAAA,MAAA,CACA,WAAA,CACA,QAAA,EACA,YAAA,EACA,OAAA,EAAA,UAAA,UAGA,EAAA,QAAA,KAAA,MAAA,EAAA,QAAA,eAzDA,OAAA,QAAA,EACA,EAAA,YAAA,SACA,EAAA,QAAA","file":"groovy.9717ca7c.js","sourceRoot":"..\\public","sourcesContent":["'use strict'\n\nmodule.exports = groovy\ngroovy.displayName = 'groovy'\ngroovy.aliases = []\nfunction groovy(Prism) {\n  Prism.languages.groovy = Prism.languages.extend('clike', {\n    keyword: /\\b(?:as|def|in|abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\\b/,\n    string: [\n      {\n        pattern: /(\"\"\"|''')[\\s\\S]*?\\1|(?:\\$\\/)(?:\\$\\/\\$|[\\s\\S])*?\\/\\$/,\n        greedy: true\n      },\n      {\n        pattern: /([\"'\\/])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true\n      }\n    ],\n    number: /\\b(?:0b[01_]+|0x[\\da-f_]+(?:\\.[\\da-f_p\\-]+)?|[\\d_]+(?:\\.[\\d_]+)?(?:e[+-]?[\\d]+)?)[glidf]?\\b/i,\n    operator: {\n      pattern: /(^|[^.])(?:~|==?~?|\\?[.:]?|\\*(?:[.=]|\\*=?)?|\\.[@&]|\\.\\.<|\\.{1,2}(?!\\.)|-[-=>]?|\\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\\|[|=]?|\\/=?|\\^=?|%=?)/,\n      lookbehind: true\n    },\n    punctuation: /\\.+|[{}[\\];(),:$]/\n  })\n  Prism.languages.insertBefore('groovy', 'string', {\n    shebang: {\n      pattern: /#!.+/,\n      alias: 'comment'\n    }\n  })\n  Prism.languages.insertBefore('groovy', 'punctuation', {\n    'spock-block': /\\b(?:setup|given|when|then|and|cleanup|expect|where):/\n  })\n  Prism.languages.insertBefore('groovy', 'function', {\n    annotation: {\n      alias: 'punctuation',\n      pattern: /(^|[^.])@\\w+/,\n      lookbehind: true\n    }\n  }) // Handle string interpolation\n  Prism.hooks.add('wrap', function(env) {\n    if (env.language === 'groovy' && env.type === 'string') {\n      var delimiter = env.content.value[0]\n      if (delimiter != \"'\") {\n        var pattern = /([^\\\\])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        if (delimiter === '$') {\n          pattern = /([^\\$])(?:\\$(?:\\{.*?\\}|[\\w.]+))/\n        } // To prevent double HTML-encoding we have to decode env.content first\n        env.content.value = env.content.value\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&')\n        env.content = Prism.highlight(env.content.value, {\n          expression: {\n            pattern: pattern,\n            lookbehind: true,\n            inside: Prism.languages.groovy\n          }\n        })\n        env.classes.push(delimiter === '/' ? 'regex' : 'gstring')\n      }\n    }\n  })\n}\n"]}
{"version":3,"sources":["../node_modules/refractor/lang/sass.js"],"names":[],"mappings":";AAAA,aAKA,SAAA,EAAA,IACA,SAAA,GACA,EAAA,UAAA,KAAA,EAAA,UAAA,OAAA,MAAA,CAEA,QAAA,CACA,QAAA,iDACA,YAAA,KAGA,EAAA,UAAA,aAAA,OAAA,SAAA,CAEA,cAAA,CAEA,QAAA,sBACA,OAAA,CACA,OAAA,+BAIA,EAAA,UAAA,KAAA,OACA,IAAA,EAAA,yBACA,EAAA,CACA,2CACA,CACA,QAAA,eACA,YAAA,IAGA,EAAA,UAAA,aAAA,OAAA,WAAA,CAEA,gBAAA,CACA,QAAA,eACA,OAAA,CACA,YAAA,IACA,SAAA,EACA,SAAA,IAIA,gBAAA,CACA,QAAA,sCACA,OAAA,CACA,SAAA,CACA,kBACA,CACA,QAAA,aACA,YAAA,IAGA,YAAA,IACA,SAAA,EACA,SAAA,EACA,UAAA,EAAA,UAAA,KAAA,qBAIA,EAAA,UAAA,KAAA,gBACA,EAAA,UAAA,KAAA,UAEA,EAAA,UAAA,aAAA,OAAA,cAAA,CACA,SAAA,CACA,QAAA,yEACA,YAAA,KA7DA,CAgEA,GApEA,OAAA,QAAA,EACA,EAAA,YAAA,OACA,EAAA,QAAA","file":"sass.018176ce.js","sourceRoot":"..\\public","sourcesContent":["'use strict'\n\nmodule.exports = sass\nsass.displayName = 'sass'\nsass.aliases = []\nfunction sass(Prism) {\n  ;(function(Prism) {\n    Prism.languages.sass = Prism.languages.extend('css', {\n      // Sass comments don't need to be closed, only indented\n      comment: {\n        pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t]+.+)*/m,\n        lookbehind: true\n      }\n    })\n    Prism.languages.insertBefore('sass', 'atrule', {\n      // We want to consume the whole line\n      'atrule-line': {\n        // Includes support for = and + shortcuts\n        pattern: /^(?:[ \\t]*)[@+=].+/m,\n        inside: {\n          atrule: /(?:@[\\w-]+|[+=])/m\n        }\n      }\n    })\n    delete Prism.languages.sass.atrule\n    var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/\n    var operator = [\n      /[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n      {\n        pattern: /(\\s+)-(?=\\s)/,\n        lookbehind: true\n      }\n    ]\n    Prism.languages.insertBefore('sass', 'property', {\n      // We want to consume the whole line\n      'variable-line': {\n        pattern: /^[ \\t]*\\$.+/m,\n        inside: {\n          punctuation: /:/,\n          variable: variable,\n          operator: operator\n        }\n      },\n      // We want to consume the whole line\n      'property-line': {\n        pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s]+.*)/m,\n        inside: {\n          property: [\n            /[^:\\s]+(?=\\s*:)/,\n            {\n              pattern: /(:)[^:\\s]+/,\n              lookbehind: true\n            }\n          ],\n          punctuation: /:/,\n          variable: variable,\n          operator: operator,\n          important: Prism.languages.sass.important\n        }\n      }\n    })\n    delete Prism.languages.sass.property\n    delete Prism.languages.sass.important // Now that whole lines for other patterns are consumed,\n    // what's left should be selectors\n    Prism.languages.insertBefore('sass', 'punctuation', {\n      selector: {\n        pattern: /([ \\t]*)\\S(?:,?[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,?[^,\\r\\n]+)*)*/,\n        lookbehind: true\n      }\n    })\n  })(Prism)\n}\n"]}
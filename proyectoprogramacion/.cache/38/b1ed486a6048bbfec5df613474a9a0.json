{"id":"ScHf","dependencies":[{"name":"C:\\Users\\mauro\\Documents\\GitHub\\ProyectoProgramacion\\proyectoprogramacion\\package.json","includedInParent":true,"mtime":1581114726879},{"name":"C:\\Users\\mauro\\Documents\\GitHub\\ProyectoProgramacion\\proyectoprogramacion\\node_modules\\refractor\\package.json","includedInParent":true,"mtime":1580852630953}],"generated":{"js":"\"use strict\";function e(e){e.languages.haskell={comment:{pattern:/(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,lookbehind:!0},char:/'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,string:{pattern:/\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,greedy:!0},keyword:/\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,import_statement:{pattern:/((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,lookbehind:!0,inside:{keyword:/\\b(?:import|qualified|as|hiding)\\b/}},builtin:/\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,number:/\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,operator:/\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,hvariable:/\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,constant:/\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,punctuation:/[{}[\\];(),.:]/},e.languages.hs=e.languages.haskell}module.exports=e,e.displayName=\"haskell\",e.aliases=[\"hs\"];"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":6,"column":0},"generated":{"line":1,"column":13}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":6,"column":0},"generated":{"line":1,"column":22}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":6,"column":0},"generated":{"line":1,"column":24}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":7,"column":0},"generated":{"line":1,"column":27}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":7,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":7,"column":0},"generated":{"line":1,"column":39}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":7,"column":0},"generated":{"line":1,"column":47}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":8,"column":0},"generated":{"line":1,"column":48}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":8,"column":0},"generated":{"line":1,"column":56}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":9,"column":0},"generated":{"line":1,"column":57}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":9,"column":0},"generated":{"line":1,"column":65}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":10,"column":0},"generated":{"line":1,"column":144}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":10,"column":0},"generated":{"line":1,"column":156}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":12,"column":0},"generated":{"line":1,"column":159}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":12,"column":0},"generated":{"line":1,"column":164}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":13,"column":0},"generated":{"line":1,"column":362}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":13,"column":0},"generated":{"line":1,"column":369}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":14,"column":0},"generated":{"line":1,"column":370}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":14,"column":0},"generated":{"line":1,"column":378}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":15,"column":0},"generated":{"line":1,"column":585}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":15,"column":0},"generated":{"line":1,"column":593}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":17,"column":0},"generated":{"line":1,"column":596}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":17,"column":0},"generated":{"line":1,"column":604}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":18,"column":0},"generated":{"line":1,"column":724}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":18,"column":0},"generated":{"line":1,"column":741}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":22,"column":0},"generated":{"line":1,"column":742}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":22,"column":0},"generated":{"line":1,"column":750}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":23,"column":0},"generated":{"line":1,"column":902}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":23,"column":0},"generated":{"line":1,"column":914}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":24,"column":0},"generated":{"line":1,"column":916}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":24,"column":0},"generated":{"line":1,"column":923}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":25,"column":0},"generated":{"line":1,"column":924}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":25,"column":0},"generated":{"line":1,"column":932}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":29,"column":0},"generated":{"line":1,"column":971}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":29,"column":0},"generated":{"line":1,"column":979}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":31,"column":0},"generated":{"line":1,"column":2652}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":31,"column":0},"generated":{"line":1,"column":2659}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":37,"column":0},"generated":{"line":1,"column":2719}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":37,"column":0},"generated":{"line":1,"column":2728}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":39,"column":0},"generated":{"line":1,"column":2899}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":39,"column":0},"generated":{"line":1,"column":2909}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":40,"column":0},"generated":{"line":1,"column":2946}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":40,"column":0},"generated":{"line":1,"column":2955}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":41,"column":0},"generated":{"line":1,"column":2991}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":41,"column":0},"generated":{"line":1,"column":3003}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":43,"column":0},"generated":{"line":1,"column":3020}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":43,"column":0},"generated":{"line":1,"column":3022}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":43,"column":0},"generated":{"line":1,"column":3032}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":43,"column":0},"generated":{"line":1,"column":3035}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":43,"column":0},"generated":{"line":1,"column":3037}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":43,"column":0},"generated":{"line":1,"column":3047}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":3,"column":0},"generated":{"line":1,"column":3055}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":3,"column":0},"generated":{"line":1,"column":3062}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":3,"column":0},"generated":{"line":1,"column":3070}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":4,"column":0},"generated":{"line":1,"column":3072}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":4,"column":0},"generated":{"line":1,"column":3074}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":4,"column":0},"generated":{"line":1,"column":3086}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":5,"column":0},"generated":{"line":1,"column":3096}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":5,"column":0},"generated":{"line":1,"column":3098}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":5,"column":0},"generated":{"line":1,"column":3106}},{"source":"../node_modules/refractor/lang/haskell.js","original":{"line":5,"column":0},"generated":{"line":1,"column":3107}}],"sources":{"../node_modules/refractor/lang/haskell.js":"'use strict'\n\nmodule.exports = haskell\nhaskell.displayName = 'haskell'\nhaskell.aliases = ['hs']\nfunction haskell(Prism) {\n  Prism.languages.haskell = {\n    comment: {\n      pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\\\\/])(?:--[^-!#$%*+=?&@|~.:<>^\\\\\\/].*|{-[\\s\\S]*?-})/m,\n      lookbehind: true\n    },\n    char: /'(?:[^\\\\']|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+))'/,\n    string: {\n      pattern: /\"(?:[^\\\\\"]|\\\\(?:[abfnrtv\\\\\"'&]|\\^[A-Z@[\\]^_]|NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|\\d+|o[0-7]+|x[0-9a-fA-F]+)|\\\\\\s+\\\\)*\"/,\n      greedy: true\n    },\n    keyword: /\\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\\b/,\n    import_statement: {\n      // The imported or hidden names are not included in this import\n      // statement. This is because we want to highlight those exactly like\n      // we do for the names in the program.\n      pattern: /((?:\\r?\\n|\\r|^)\\s*)import\\s+(?:qualified\\s+)?(?:[A-Z][\\w']*)(?:\\.[A-Z][\\w']*)*(?:\\s+as\\s+(?:[A-Z][_a-zA-Z0-9']*)(?:\\.[A-Z][\\w']*)*)?(?:\\s+hiding\\b)?/m,\n      lookbehind: true,\n      inside: {\n        keyword: /\\b(?:import|qualified|as|hiding)\\b/\n      }\n    },\n    // These are builtin variables only. Constructors are highlighted later as a constant.\n    builtin: /\\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\\b/,\n    // decimal integers and floating point numbers | octal integers | hexadecimal integers\n    number: /\\b(?:\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?|0o[0-7]+|0x[0-9a-f]+)\\b/i,\n    // Most of this is needed because of the meaning of a single '.'.\n    // If it stands alone freely, it is the function composition.\n    // It may also be a separator between a module name and an identifier => no\n    // operator. If it comes together with other special characters it is an\n    // operator too.\n    operator: /\\s\\.\\s|[-!#$%*+=?&@|~.:<>^\\\\\\/]*\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]+|[-!#$%*+=?&@|~.:<>^\\\\\\/]+\\.[-!#$%*+=?&@|~.:<>^\\\\\\/]*|[-!#$%*+=?&@|~:<>^\\\\\\/]+|`([A-Z][\\w']*\\.)*[_a-z][\\w']*`/,\n    // In Haskell, nearly everything is a variable, do not highlight these.\n    hvariable: /\\b(?:[A-Z][\\w']*\\.)*[_a-z][\\w']*\\b/,\n    constant: /\\b(?:[A-Z][\\w']*\\.)*[A-Z][\\w']*\\b/,\n    punctuation: /[{}[\\];(),.:]/\n  }\n  Prism.languages.hs = Prism.languages.haskell\n}\n"},"lineCount":null}},"error":null,"hash":"511a514f169e419eba16102ee96a0a84","cacheData":{"env":{}}}
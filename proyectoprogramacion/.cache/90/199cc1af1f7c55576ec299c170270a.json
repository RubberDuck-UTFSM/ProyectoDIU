{"id":"WDWw","dependencies":[{"name":"C:\\Users\\mauro\\Documents\\GitHub\\ProyectoProgramacion\\proyectoprogramacion\\package.json","includedInParent":true,"mtime":1581114726879},{"name":"C:\\Users\\mauro\\Documents\\GitHub\\ProyectoProgramacion\\proyectoprogramacion\\node_modules\\refractor\\package.json","includedInParent":true,"mtime":1580852630953}],"generated":{"js":"\"use strict\";function n(n){n.languages.prolog={comment:[/%.+/,/\\/\\*[\\s\\S]*?\\*\\//],string:{pattern:/([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},builtin:/\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,variable:/\\b[A-Z_]\\w*/,function:/\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,number:/\\b\\d+\\.?\\d*/,operator:/[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,punctuation:/[(){}\\[\\],]/}}module.exports=n,n.displayName=\"prolog\",n.aliases=[];"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":6,"column":0},"generated":{"line":1,"column":13}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":6,"column":0},"generated":{"line":1,"column":22}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":6,"column":0},"generated":{"line":1,"column":24}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":7,"column":0},"generated":{"line":1,"column":27}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":7,"column":0},"generated":{"line":1,"column":29}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":7,"column":0},"generated":{"line":1,"column":39}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":7,"column":0},"generated":{"line":1,"column":46}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":9,"column":0},"generated":{"line":1,"column":47}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":9,"column":0},"generated":{"line":1,"column":55}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":9,"column":0},"generated":{"line":1,"column":56}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":9,"column":0},"generated":{"line":1,"column":62}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":11,"column":0},"generated":{"line":1,"column":82}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":11,"column":0},"generated":{"line":1,"column":89}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":12,"column":0},"generated":{"line":1,"column":90}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":12,"column":0},"generated":{"line":1,"column":98}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":13,"column":0},"generated":{"line":1,"column":152}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":13,"column":0},"generated":{"line":1,"column":160}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":15,"column":0},"generated":{"line":1,"column":163}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":15,"column":0},"generated":{"line":1,"column":171}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":16,"column":0},"generated":{"line":1,"column":200}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":16,"column":0},"generated":{"line":1,"column":209}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":18,"column":0},"generated":{"line":1,"column":223}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":18,"column":0},"generated":{"line":1,"column":232}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":19,"column":0},"generated":{"line":1,"column":261}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":19,"column":0},"generated":{"line":1,"column":268}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":21,"column":0},"generated":{"line":1,"column":282}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":21,"column":0},"generated":{"line":1,"column":291}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":22,"column":0},"generated":{"line":1,"column":340}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":22,"column":0},"generated":{"line":1,"column":352}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":3,"column":0},"generated":{"line":1,"column":367}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":3,"column":0},"generated":{"line":1,"column":374}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":3,"column":0},"generated":{"line":1,"column":382}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":4,"column":0},"generated":{"line":1,"column":384}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":4,"column":0},"generated":{"line":1,"column":386}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":4,"column":0},"generated":{"line":1,"column":398}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":5,"column":0},"generated":{"line":1,"column":407}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":5,"column":0},"generated":{"line":1,"column":409}},{"source":"../node_modules/refractor/lang/prolog.js","original":{"line":5,"column":0},"generated":{"line":1,"column":417}}],"sources":{"../node_modules/refractor/lang/prolog.js":"'use strict'\n\nmodule.exports = prolog\nprolog.displayName = 'prolog'\nprolog.aliases = []\nfunction prolog(Prism) {\n  Prism.languages.prolog = {\n    // Syntax depends on the implementation\n    comment: [/%.+/, /\\/\\*[\\s\\S]*?\\*\\//],\n    // Depending on the implementation, strings may allow escaped newlines and quote-escape\n    string: {\n      pattern: /([\"'])(?:\\1\\1|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      greedy: true\n    },\n    builtin: /\\b(?:fx|fy|xf[xy]?|yfx?)\\b/,\n    variable: /\\b[A-Z_]\\w*/,\n    // FIXME: Should we list all null-ary predicates (not followed by a parenthesis) like halt, trace, etc.?\n    function: /\\b[a-z]\\w*(?:(?=\\()|\\/\\d+)/,\n    number: /\\b\\d+\\.?\\d*/,\n    // Custom operators are allowed\n    operator: /[:\\\\=><\\-?*@\\/;+^|!$.]+|\\b(?:is|mod|not|xor)\\b/,\n    punctuation: /[(){}\\[\\],]/\n  }\n}\n"},"lineCount":null}},"error":null,"hash":"990f4f636dce6dadb9df33839b79c1be","cacheData":{"env":{}}}
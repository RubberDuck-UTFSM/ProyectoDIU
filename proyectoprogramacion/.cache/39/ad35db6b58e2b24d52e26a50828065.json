{"id":"../node_modules/refractor/lang/markup-templating.js","dependencies":[{"name":"C:\\Users\\mauro\\Documents\\GitHub\\ProyectoProgramacion\\proyectoprogramacion\\package.json","includedInParent":true,"mtime":1581128016331},{"name":"C:\\Users\\mauro\\Documents\\GitHub\\ProyectoProgramacion\\proyectoprogramacion\\node_modules\\refractor\\package.json","includedInParent":true,"mtime":1580852630953}],"generated":{"js":"'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function(Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function(match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/refractor/lang/markup-templating.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}}],"sources":{"../node_modules/refractor/lang/markup-templating.js":"'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function(Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function(match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"},"lineCount":122}},"error":null,"hash":"1aa0e62c964ded30adcd601484a7bef6","cacheData":{"env":{}}}